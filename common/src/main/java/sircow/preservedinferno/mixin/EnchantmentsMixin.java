package sircow.preservedinferno.mixin;

import net.minecraft.advancements.critereon.*;
import net.minecraft.core.Holder;
import net.minecraft.core.HolderGetter;
import net.minecraft.core.HolderSet;
import net.minecraft.core.Vec3i;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.core.registries.Registries;
import net.minecraft.data.worldgen.BootstrapContext;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.tags.*;
import net.minecraft.util.valueproviders.ConstantFloat;
import net.minecraft.util.valueproviders.UniformFloat;
import net.minecraft.world.damagesource.DamageType;
import net.minecraft.world.damagesource.DamageTypes;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.EquipmentSlotGroup;
import net.minecraft.world.entity.ai.attributes.AttributeModifier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.item.CrossbowItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.enchantment.*;
import net.minecraft.world.item.enchantment.effects.*;
import net.minecraft.world.level.ItemLike;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.gameevent.GameEvent;
import net.minecraft.world.level.levelgen.blockpredicates.BlockPredicate;
import net.minecraft.world.level.levelgen.feature.stateproviders.BlockStateProvider;
import net.minecraft.world.level.material.Fluid;
import net.minecraft.world.level.material.Fluids;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.*;
import net.minecraft.world.level.storage.loot.providers.number.EnchantmentLevelProvider;
import net.minecraft.world.phys.Vec3;
import org.spongepowered.asm.mixin.Mixin;
import org.spongepowered.asm.mixin.Shadow;
import org.spongepowered.asm.mixin.Unique;
import org.spongepowered.asm.mixin.injection.At;
import org.spongepowered.asm.mixin.injection.Inject;
import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;

import java.util.List;
import java.util.Optional;
import java.util.function.Function;

@Mixin(Enchantments.class)
public class EnchantmentsMixin {
    @Shadow public static final ResourceKey<Enchantment> PROTECTION = preserved_inferno$key("protection");
    @Shadow public static final ResourceKey<Enchantment> FIRE_PROTECTION = preserved_inferno$key("fire_protection");
    @Shadow public static final ResourceKey<Enchantment> FEATHER_FALLING = preserved_inferno$key("feather_falling");
    @Shadow public static final ResourceKey<Enchantment> BLAST_PROTECTION = preserved_inferno$key("blast_protection");
    @Shadow public static final ResourceKey<Enchantment> PROJECTILE_PROTECTION = preserved_inferno$key("projectile_protection");
    @Shadow public static final ResourceKey<Enchantment> RESPIRATION = preserved_inferno$key("respiration");
    @Shadow public static final ResourceKey<Enchantment> AQUA_AFFINITY = preserved_inferno$key("aqua_affinity");
    @Shadow public static final ResourceKey<Enchantment> THORNS = preserved_inferno$key("thorns");
    @Shadow public static final ResourceKey<Enchantment> DEPTH_STRIDER = preserved_inferno$key("depth_strider");
    @Shadow public static final ResourceKey<Enchantment> FROST_WALKER = preserved_inferno$key("frost_walker");
    @Shadow public static final ResourceKey<Enchantment> BINDING_CURSE = preserved_inferno$key("binding_curse");
    @Shadow public static final ResourceKey<Enchantment> SOUL_SPEED = preserved_inferno$key("soul_speed");
    @Shadow public static final ResourceKey<Enchantment> SWIFT_SNEAK = preserved_inferno$key("swift_sneak");
    @Shadow public static final ResourceKey<Enchantment> SHARPNESS = preserved_inferno$key("sharpness");
    @Shadow public static final ResourceKey<Enchantment> SMITE = preserved_inferno$key("smite");
    @Shadow public static final ResourceKey<Enchantment> BANE_OF_ARTHROPODS = preserved_inferno$key("bane_of_arthropods");
    @Shadow public static final ResourceKey<Enchantment> KNOCKBACK = preserved_inferno$key("knockback");
    @Shadow public static final ResourceKey<Enchantment> FIRE_ASPECT = preserved_inferno$key("fire_aspect");
    @Shadow public static final ResourceKey<Enchantment> LOOTING = preserved_inferno$key("looting");
    @Shadow public static final ResourceKey<Enchantment> SWEEPING_EDGE = preserved_inferno$key("sweeping_edge");
    @Shadow public static final ResourceKey<Enchantment> EFFICIENCY = preserved_inferno$key("efficiency");
    @Shadow public static final ResourceKey<Enchantment> SILK_TOUCH = preserved_inferno$key("silk_touch");
    @Shadow public static final ResourceKey<Enchantment> UNBREAKING = preserved_inferno$key("unbreaking");
    @Shadow public static final ResourceKey<Enchantment> FORTUNE = preserved_inferno$key("fortune");
    @Shadow public static final ResourceKey<Enchantment> POWER = preserved_inferno$key("power");
    @Shadow public static final ResourceKey<Enchantment> PUNCH = preserved_inferno$key("punch");
    @Shadow public static final ResourceKey<Enchantment> FLAME = preserved_inferno$key("flame");
    @Shadow public static final ResourceKey<Enchantment> INFINITY = preserved_inferno$key("infinity");
    @Shadow public static final ResourceKey<Enchantment> LUCK_OF_THE_SEA = preserved_inferno$key("luck_of_the_sea");
    @Shadow public static final ResourceKey<Enchantment> LURE = preserved_inferno$key("lure");
    @Shadow public static final ResourceKey<Enchantment> LOYALTY = preserved_inferno$key("loyalty");
    @Shadow public static final ResourceKey<Enchantment> IMPALING = preserved_inferno$key("impaling");
    @Shadow public static final ResourceKey<Enchantment> RIPTIDE = preserved_inferno$key("riptide");
    @Shadow public static final ResourceKey<Enchantment> CHANNELING = preserved_inferno$key("channeling");
    @Shadow public static final ResourceKey<Enchantment> MULTISHOT = preserved_inferno$key("multishot");
    @Shadow public static final ResourceKey<Enchantment> QUICK_CHARGE = preserved_inferno$key("quick_charge");
    @Shadow public static final ResourceKey<Enchantment> PIERCING = preserved_inferno$key("piercing");
    @Shadow public static final ResourceKey<Enchantment> DENSITY = preserved_inferno$key("density");
    @Shadow public static final ResourceKey<Enchantment> BREACH = preserved_inferno$key("breach");
    @Shadow public static final ResourceKey<Enchantment> WIND_BURST = preserved_inferno$key("wind_burst");
    @Shadow public static final ResourceKey<Enchantment> VANISHING_CURSE = preserved_inferno$key("vanishing_curse");

    @Inject(method = "bootstrap", at = @At("HEAD"), cancellable = true)
    private static void preserved_inferno$removeEnchant(BootstrapContext<Enchantment> context, CallbackInfo ci) {
        HolderGetter<DamageType> holdergetter = context.lookup(Registries.DAMAGE_TYPE);
        HolderGetter<Enchantment> holdergetter1 = context.lookup(Registries.ENCHANTMENT);
        HolderGetter<Item> holdergetter2 = context.lookup(Registries.ITEM);
        HolderGetter<Block> holdergetter3 = context.lookup(Registries.BLOCK);
        HolderGetter<EntityType<?>> holdergetter4 = context.lookup(Registries.ENTITY_TYPE);
        preserved_inferno$register(context, PROTECTION, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.ARMOR_ENCHANTABLE), 10, 4, Enchantment.dynamicCost(1, 11), Enchantment.dynamicCost(12, 11), 1, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.ARMOR_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE_PROTECTION, new AddValue(LevelBasedValue.perLevel(1.0F)), DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))));
        preserved_inferno$register(context, FIRE_PROTECTION, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.ARMOR_ENCHANTABLE), 5, 4, Enchantment.dynamicCost(10, 8), Enchantment.dynamicCost(18, 8), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.ARMOR_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE_PROTECTION, new AddValue(LevelBasedValue.perLevel(2.0F)), AllOfCondition.allOf(new LootItemCondition.Builder[]{DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.is(DamageTypeTags.IS_FIRE)).tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.fire_protection"), Attributes.BURNING_TIME, LevelBasedValue.perLevel(-0.15F), AttributeModifier.Operation.ADD_MULTIPLIED_BASE)));
        preserved_inferno$register(context, FEATHER_FALLING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FOOT_ARMOR_ENCHANTABLE), 5, 4, Enchantment.dynamicCost(5, 6), Enchantment.dynamicCost(11, 6), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).withEffect(EnchantmentEffectComponents.DAMAGE_PROTECTION, new AddValue(LevelBasedValue.perLevel(3.0F)), DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.is(DamageTypeTags.IS_FALL)).tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))));
        preserved_inferno$register(context, BLAST_PROTECTION, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.ARMOR_ENCHANTABLE), 2, 4, Enchantment.dynamicCost(5, 8), Enchantment.dynamicCost(13, 8), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.ARMOR_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE_PROTECTION, new AddValue(LevelBasedValue.perLevel(2.0F)), DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.is(DamageTypeTags.IS_EXPLOSION)).tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.blast_protection"), Attributes.EXPLOSION_KNOCKBACK_RESISTANCE, LevelBasedValue.perLevel(0.15F), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, PROJECTILE_PROTECTION, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.ARMOR_ENCHANTABLE), 5, 4, Enchantment.dynamicCost(3, 6), Enchantment.dynamicCost(9, 6), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.ARMOR_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE_PROTECTION, new AddValue(LevelBasedValue.perLevel(2.0F)), DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.is(DamageTypeTags.IS_PROJECTILE)).tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))));
        preserved_inferno$register(context, RESPIRATION, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.HEAD_ARMOR_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(10, 10), Enchantment.dynamicCost(40, 10), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.HEAD})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.respiration"), Attributes.OXYGEN_BONUS, LevelBasedValue.perLevel(1.0F), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, AQUA_AFFINITY, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.HEAD_ARMOR_ENCHANTABLE), 2, 1, Enchantment.constantCost(1), Enchantment.constantCost(41), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.HEAD})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.aqua_affinity"), Attributes.SUBMERGED_MINING_SPEED, LevelBasedValue.perLevel(4.0F), AttributeModifier.Operation.ADD_MULTIPLIED_TOTAL)));
        preserved_inferno$register(context, THORNS, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.ARMOR_ENCHANTABLE), holdergetter2.getOrThrow(ItemTags.CHEST_ARMOR_ENCHANTABLE), 1, 3, Enchantment.dynamicCost(10, 20), Enchantment.dynamicCost(60, 20), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.ANY})).withEffect(EnchantmentEffectComponents.POST_ATTACK, EnchantmentTarget.VICTIM, EnchantmentTarget.ATTACKER, AllOf.entityEffects(new EnchantmentEntityEffect[]{new DamageEntity(LevelBasedValue.constant(1.0F), LevelBasedValue.constant(5.0F), holdergetter.getOrThrow(DamageTypes.THORNS)), new ChangeItemDamage(LevelBasedValue.constant(2.0F))}), LootItemRandomChanceCondition.randomChance(EnchantmentLevelProvider.forEnchantmentLevel(LevelBasedValue.perLevel(0.15F)))));
        preserved_inferno$register(context, DEPTH_STRIDER, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FOOT_ARMOR_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(10, 10), Enchantment.dynamicCost(25, 10), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.FEET})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.BOOTS_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.depth_strider"), Attributes.WATER_MOVEMENT_EFFICIENCY, LevelBasedValue.perLevel(0.33333334F), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, FROST_WALKER, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FOOT_ARMOR_ENCHANTABLE), 2, 2, Enchantment.dynamicCost(10, 10), Enchantment.dynamicCost(25, 10), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.FEET})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.BOOTS_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE_IMMUNITY, DamageImmunity.INSTANCE, DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().tag(TagPredicate.is(DamageTypeTags.BURN_FROM_STEPPING)).tag(TagPredicate.isNot(DamageTypeTags.BYPASSES_INVULNERABILITY)))).withEffect(EnchantmentEffectComponents.LOCATION_CHANGED, new ReplaceDisk(new LevelBasedValue.Clamped(LevelBasedValue.perLevel(3.0F, 1.0F), 0.0F, 16.0F), LevelBasedValue.constant(1.0F), new Vec3i(0, -1, 0), Optional.of(BlockPredicate.allOf(new BlockPredicate[]{BlockPredicate.matchesTag(new Vec3i(0, 1, 0), BlockTags.AIR), BlockPredicate.matchesBlocks(new Block[]{Blocks.WATER}), BlockPredicate.matchesFluids(new Fluid[]{Fluids.WATER}), BlockPredicate.unobstructed()})), BlockStateProvider.simple(Blocks.FROSTED_ICE), Optional.of(GameEvent.BLOCK_PLACE)), AllOfCondition.allOf(new LootItemCondition.Builder[]{LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setOnGround(true))), InvertedLootItemCondition.invert(LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().vehicle(net.minecraft.advancements.critereon.EntityPredicate.Builder.entity())))})));
        preserved_inferno$register(context, BINDING_CURSE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.EQUIPPABLE_ENCHANTABLE), 1, 1, Enchantment.constantCost(25), Enchantment.constantCost(50), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.ARMOR})).withEffect(EnchantmentEffectComponents.PREVENT_ARMOR_CHANGE));
        EntityPredicate.Builder entitypredicate$builder = net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().periodicTick(5).flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setIsFlying(false).setOnGround(true)).moving(MovementPredicate.horizontalSpeed(MinMaxBounds.Doubles.atLeast((double)1.0E-5F))).movementAffectedBy(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setBlock(net.minecraft.advancements.critereon.BlockPredicate.Builder.block().of(holdergetter3, BlockTags.SOUL_SPEED_BLOCKS)));
        AllOfCondition.Builder allofcondition$builder = AllOfCondition.allOf(new LootItemCondition.Builder[]{InvertedLootItemCondition.invert(LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().vehicle(net.minecraft.advancements.critereon.EntityPredicate.Builder.entity()))), AnyOfCondition.anyOf(new LootItemCondition.Builder[]{AllOfCondition.allOf(new LootItemCondition.Builder[]{EnchantmentActiveCheck.enchantmentActiveCheck(), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setIsFlying(false))), AnyOfCondition.anyOf(new LootItemCondition.Builder[]{LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().movementAffectedBy(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setBlock(net.minecraft.advancements.critereon.BlockPredicate.Builder.block().of(holdergetter3, BlockTags.SOUL_SPEED_BLOCKS)))), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setOnGround(false)).build())})}), AllOfCondition.allOf(new LootItemCondition.Builder[]{EnchantmentActiveCheck.enchantmentInactiveCheck(), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().movementAffectedBy(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setBlock(net.minecraft.advancements.critereon.BlockPredicate.Builder.block().of(holdergetter3, BlockTags.SOUL_SPEED_BLOCKS))).flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setIsFlying(false)))})})});
        preserved_inferno$register(context, SOUL_SPEED, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FOOT_ARMOR_ENCHANTABLE), 1, 3, Enchantment.dynamicCost(10, 10), Enchantment.dynamicCost(25, 10), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.FEET})).withEffect(EnchantmentEffectComponents.LOCATION_CHANGED, AllOf.locationBasedEffects(new EnchantmentLocationBasedEffect[]{new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.soul_speed"), Attributes.MOVEMENT_SPEED, LevelBasedValue.perLevel(0.0405F, 0.0105F), AttributeModifier.Operation.ADD_VALUE), new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.soul_speed"), Attributes.MOVEMENT_EFFICIENCY, LevelBasedValue.constant(1.0F), AttributeModifier.Operation.ADD_VALUE)}), allofcondition$builder).withEffect(EnchantmentEffectComponents.LOCATION_CHANGED, new ChangeItemDamage(LevelBasedValue.constant(1.0F)), AllOfCondition.allOf(new LootItemCondition.Builder[]{LootItemRandomChanceCondition.randomChance(EnchantmentLevelProvider.forEnchantmentLevel(LevelBasedValue.constant(0.04F))), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setOnGround(true)).movementAffectedBy(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setBlock(net.minecraft.advancements.critereon.BlockPredicate.Builder.block().of(holdergetter3, BlockTags.SOUL_SPEED_BLOCKS))))})).withEffect(EnchantmentEffectComponents.TICK, new SpawnParticlesEffect(ParticleTypes.SOUL, SpawnParticlesEffect.inBoundingBox(), SpawnParticlesEffect.offsetFromEntityPosition(0.1F), SpawnParticlesEffect.movementScaled(-0.2F), SpawnParticlesEffect.fixedVelocity(ConstantFloat.of(0.1F)), ConstantFloat.of(1.0F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, entitypredicate$builder)).withEffect(EnchantmentEffectComponents.TICK, new PlaySoundEffect(SoundEvents.SOUL_ESCAPE, ConstantFloat.of(0.6F), UniformFloat.of(0.6F, 1.0F)), AllOfCondition.allOf(new LootItemCondition.Builder[]{LootItemRandomChanceCondition.randomChance(0.35F), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, entitypredicate$builder)})));
        preserved_inferno$register(context, SWIFT_SNEAK, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.LEG_ARMOR_ENCHANTABLE), 1, 3, Enchantment.dynamicCost(25, 25), Enchantment.dynamicCost(75, 25), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.LEGS})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.swift_sneak"), Attributes.SNEAKING_SPEED, LevelBasedValue.perLevel(0.15F), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, SHARPNESS, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.SHARP_WEAPON_ENCHANTABLE), holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 10, 5, Enchantment.dynamicCost(1, 11), Enchantment.dynamicCost(21, 11), 1, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE, new AddValue(LevelBasedValue.perLevel(1.0F, 0.5F))));
        preserved_inferno$register(context, SMITE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.WEAPON_ENCHANTABLE), holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 5, 5, Enchantment.dynamicCost(5, 8), Enchantment.dynamicCost(25, 8), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE, new AddValue(LevelBasedValue.perLevel(2.5F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().entityType(EntityTypePredicate.of(holdergetter4, EntityTypeTags.SENSITIVE_TO_SMITE)))));
        preserved_inferno$register(context, BANE_OF_ARTHROPODS, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.WEAPON_ENCHANTABLE), holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 5, 5, Enchantment.dynamicCost(5, 8), Enchantment.dynamicCost(25, 8), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE, new AddValue(LevelBasedValue.perLevel(2.5F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().entityType(EntityTypePredicate.of(holdergetter4, EntityTypeTags.SENSITIVE_TO_BANE_OF_ARTHROPODS)))).withEffect(EnchantmentEffectComponents.POST_ATTACK, EnchantmentTarget.ATTACKER, EnchantmentTarget.VICTIM, new ApplyMobEffect(HolderSet.direct(new Holder[]{MobEffects.SLOWNESS}), LevelBasedValue.constant(1.5F), LevelBasedValue.perLevel(1.5F, 0.5F), LevelBasedValue.constant(3.0F), LevelBasedValue.constant(3.0F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().entityType(EntityTypePredicate.of(holdergetter4, EntityTypeTags.SENSITIVE_TO_BANE_OF_ARTHROPODS))).and(DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().isDirect(true)))));
        preserved_inferno$register(context, KNOCKBACK, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 5, 2, Enchantment.dynamicCost(5, 20), Enchantment.dynamicCost(55, 20), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.KNOCKBACK, new AddValue(LevelBasedValue.perLevel(1.0F))));
        preserved_inferno$register(context, FIRE_ASPECT, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FIRE_ASPECT_ENCHANTABLE), holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 2, 2, Enchantment.dynamicCost(10, 20), Enchantment.dynamicCost(60, 20), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.POST_ATTACK, EnchantmentTarget.ATTACKER, EnchantmentTarget.VICTIM, new Ignite(LevelBasedValue.perLevel(4.0F)), DamageSourceCondition.hasDamageSource(DamageSourcePredicate.Builder.damageType().isDirect(true))));
        preserved_inferno$register(context, LOOTING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.EQUIPMENT_DROPS, EnchantmentTarget.ATTACKER, EnchantmentTarget.VICTIM, new AddValue(LevelBasedValue.perLevel(0.01F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.ATTACKER, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().entityType(EntityTypePredicate.of(holdergetter4, EntityType.PLAYER)))));
        preserved_inferno$register(context, SWEEPING_EDGE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.SWORD_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(5, 9), Enchantment.dynamicCost(20, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.sweeping_edge"), Attributes.SWEEPING_DAMAGE_RATIO, new LevelBasedValue.Fraction(LevelBasedValue.perLevel(1.0F), LevelBasedValue.perLevel(2.0F, 1.0F)), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, EFFICIENCY, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MINING_ENCHANTABLE), 10, 5, Enchantment.dynamicCost(1, 10), Enchantment.dynamicCost(51, 10), 1, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.ATTRIBUTES, new EnchantmentAttributeEffect(ResourceLocation.withDefaultNamespace("enchantment.efficiency"), Attributes.MINING_EFFICIENCY, new LevelBasedValue.LevelsSquared(1.0F), AttributeModifier.Operation.ADD_VALUE)));
        preserved_inferno$register(context, SILK_TOUCH, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MINING_LOOT_ENCHANTABLE), 1, 1, Enchantment.constantCost(15), Enchantment.constantCost(65), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.MINING_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.BLOCK_EXPERIENCE, new SetValue(LevelBasedValue.constant(0.0F))));
        preserved_inferno$register(context, UNBREAKING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.DURABILITY_ENCHANTABLE), 5, 3, Enchantment.dynamicCost(5, 8), Enchantment.dynamicCost(55, 8), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.ANY})).withEffect(EnchantmentEffectComponents.ITEM_DAMAGE, new RemoveBinomial(new LevelBasedValue.Fraction(LevelBasedValue.perLevel(2.0F), LevelBasedValue.perLevel(10.0F, 5.0F))), MatchTool.toolMatches(net.minecraft.advancements.critereon.ItemPredicate.Builder.item().of(holdergetter2, ItemTags.ARMOR_ENCHANTABLE))).withEffect(EnchantmentEffectComponents.ITEM_DAMAGE, new RemoveBinomial(new LevelBasedValue.Fraction(LevelBasedValue.perLevel(1.0F), LevelBasedValue.perLevel(2.0F, 1.0F))), InvertedLootItemCondition.invert(MatchTool.toolMatches(net.minecraft.advancements.critereon.ItemPredicate.Builder.item().of(holdergetter2, ItemTags.ARMOR_ENCHANTABLE)))));
        preserved_inferno$register(context, FORTUNE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MINING_LOOT_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.MINING_EXCLUSIVE)));
        preserved_inferno$register(context, POWER, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.BOW_ENCHANTABLE), 10, 5, Enchantment.dynamicCost(1, 10), Enchantment.dynamicCost(16, 10), 1, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.DAMAGE, new AddValue(LevelBasedValue.perLevel(1.0F, 0.5F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.DIRECT_ATTACKER, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().of(holdergetter4, EntityTypeTags.ARROWS).build())));
        preserved_inferno$register(context, PUNCH, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.BOW_ENCHANTABLE), 2, 2, Enchantment.dynamicCost(12, 20), Enchantment.dynamicCost(37, 20), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.KNOCKBACK, new AddValue(LevelBasedValue.perLevel(1.0F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.DIRECT_ATTACKER, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().of(holdergetter4, EntityTypeTags.ARROWS).build())));
        preserved_inferno$register(context, FLAME, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.BOW_ENCHANTABLE), 2, 1, Enchantment.constantCost(20), Enchantment.constantCost(50), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.PROJECTILE_SPAWNED, new Ignite(LevelBasedValue.constant(100.0F))));
        preserved_inferno$register(context, INFINITY, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.BOW_ENCHANTABLE), 1, 1, Enchantment.constantCost(20), Enchantment.constantCost(50), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.BOW_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.AMMO_USE, new SetValue(LevelBasedValue.constant(0.0F)), MatchTool.toolMatches(net.minecraft.advancements.critereon.ItemPredicate.Builder.item().of(holdergetter2, new ItemLike[]{Items.ARROW}))));
        preserved_inferno$register(context, LUCK_OF_THE_SEA, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FISHING_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.FISHING_LUCK_BONUS, new AddValue(LevelBasedValue.perLevel(1.0F))));
        preserved_inferno$register(context, LURE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.FISHING_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.FISHING_TIME_REDUCTION, new AddValue(LevelBasedValue.perLevel(5.0F))));
        preserved_inferno$register(context, LOYALTY, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.TRIDENT_ENCHANTABLE), 5, 3, Enchantment.dynamicCost(12, 7), Enchantment.constantCost(50), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.TRIDENT_RETURN_ACCELERATION, new AddValue(LevelBasedValue.perLevel(1.0F))));
        preserved_inferno$register(context, IMPALING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.TRIDENT_ENCHANTABLE), 2, 5, Enchantment.dynamicCost(1, 8), Enchantment.dynamicCost(21, 8), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.DAMAGE, new AddValue(LevelBasedValue.perLevel(2.5F)), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().entityType(EntityTypePredicate.of(holdergetter4, EntityTypeTags.SENSITIVE_TO_IMPALING)).build())));
        preserved_inferno$register(context, RIPTIDE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.TRIDENT_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(17, 7), Enchantment.constantCost(50), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.HAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.RIPTIDE_EXCLUSIVE)).withSpecialEffect(EnchantmentEffectComponents.TRIDENT_SPIN_ATTACK_STRENGTH, new AddValue(LevelBasedValue.perLevel(1.5F, 0.75F))).withSpecialEffect(EnchantmentEffectComponents.TRIDENT_SOUND, List.of(SoundEvents.TRIDENT_RIPTIDE_1, SoundEvents.TRIDENT_RIPTIDE_2, SoundEvents.TRIDENT_RIPTIDE_3)));
        preserved_inferno$register(context, CHANNELING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.TRIDENT_ENCHANTABLE), 1, 1, Enchantment.constantCost(25), Enchantment.constantCost(50), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.POST_ATTACK, EnchantmentTarget.ATTACKER, EnchantmentTarget.VICTIM, AllOf.entityEffects(new EnchantmentEntityEffect[]{new SummonEntityEffect(HolderSet.direct(new Holder[]{EntityType.LIGHTNING_BOLT.builtInRegistryHolder()}), false), new PlaySoundEffect(SoundEvents.TRIDENT_THUNDER, ConstantFloat.of(5.0F), ConstantFloat.of(1.0F))}), AllOfCondition.allOf(new LootItemCondition.Builder[]{WeatherCheck.weather().setThundering(true), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().located(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setCanSeeSky(true))), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.DIRECT_ATTACKER, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().of(holdergetter4, EntityType.TRIDENT))})).withEffect(EnchantmentEffectComponents.HIT_BLOCK, AllOf.entityEffects(new EnchantmentEntityEffect[]{new SummonEntityEffect(HolderSet.direct(new Holder[]{EntityType.LIGHTNING_BOLT.builtInRegistryHolder()}), false), new PlaySoundEffect(SoundEvents.TRIDENT_THUNDER, ConstantFloat.of(5.0F), ConstantFloat.of(1.0F))}), AllOfCondition.allOf(new LootItemCondition.Builder[]{WeatherCheck.weather().setThundering(true), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.THIS, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().of(holdergetter4, EntityType.TRIDENT)), LocationCheck.checkLocation(net.minecraft.advancements.critereon.LocationPredicate.Builder.location().setCanSeeSky(true)), LootItemBlockStatePropertyCondition.hasBlockStateProperties(Blocks.LIGHTNING_ROD)})));
        preserved_inferno$register(context, MULTISHOT, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.CROSSBOW_ENCHANTABLE), 2, 1, Enchantment.constantCost(20), Enchantment.constantCost(50), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.CROSSBOW_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.PROJECTILE_COUNT, new AddValue(LevelBasedValue.perLevel(2.0F))).withEffect(EnchantmentEffectComponents.PROJECTILE_SPREAD, new AddValue(LevelBasedValue.perLevel(10.0F))));
        preserved_inferno$register(context, QUICK_CHARGE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.CROSSBOW_ENCHANTABLE), 5, 3, Enchantment.dynamicCost(12, 20), Enchantment.constantCost(50), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND, EquipmentSlotGroup.OFFHAND})).withSpecialEffect(EnchantmentEffectComponents.CROSSBOW_CHARGE_TIME, new AddValue(LevelBasedValue.perLevel(-0.25F))).withSpecialEffect(EnchantmentEffectComponents.CROSSBOW_CHARGING_SOUNDS, List.of(new CrossbowItem.ChargingSounds(Optional.of(SoundEvents.CROSSBOW_QUICK_CHARGE_1), Optional.empty(), Optional.of(SoundEvents.CROSSBOW_LOADING_END)), new CrossbowItem.ChargingSounds(Optional.of(SoundEvents.CROSSBOW_QUICK_CHARGE_2), Optional.empty(), Optional.of(SoundEvents.CROSSBOW_LOADING_END)), new CrossbowItem.ChargingSounds(Optional.of(SoundEvents.CROSSBOW_QUICK_CHARGE_3), Optional.empty(), Optional.of(SoundEvents.CROSSBOW_LOADING_END)))));
        preserved_inferno$register(context, PIERCING, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.CROSSBOW_ENCHANTABLE), 10, 4, Enchantment.dynamicCost(1, 10), Enchantment.constantCost(50), 1, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.CROSSBOW_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.PROJECTILE_PIERCING, new AddValue(LevelBasedValue.perLevel(1.0F))));
        preserved_inferno$register(context, DENSITY, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MACE_ENCHANTABLE), 5, 5, Enchantment.dynamicCost(5, 8), Enchantment.dynamicCost(25, 8), 2, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.SMASH_DAMAGE_PER_FALLEN_BLOCK, new AddValue(LevelBasedValue.perLevel(0.5F))));
        preserved_inferno$register(context, BREACH, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MACE_ENCHANTABLE), 2, 4, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).exclusiveWith(holdergetter1.getOrThrow(EnchantmentTags.DAMAGE_EXCLUSIVE)).withEffect(EnchantmentEffectComponents.ARMOR_EFFECTIVENESS, new AddValue(LevelBasedValue.perLevel(-0.15F))));
        preserved_inferno$register(context, WIND_BURST, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.MACE_ENCHANTABLE), 2, 3, Enchantment.dynamicCost(15, 9), Enchantment.dynamicCost(65, 9), 4, new EquipmentSlotGroup[]{EquipmentSlotGroup.MAINHAND})).withEffect(EnchantmentEffectComponents.POST_ATTACK, EnchantmentTarget.ATTACKER, EnchantmentTarget.ATTACKER, new ExplodeEffect(false, Optional.empty(), Optional.of(LevelBasedValue.lookup(List.of(1.2F, 1.75F, 2.2F), LevelBasedValue.perLevel(1.5F, 0.35F))), holdergetter3.get(BlockTags.BLOCKS_WIND_CHARGE_EXPLOSIONS).map(Function.identity()), Vec3.ZERO, LevelBasedValue.constant(3.5F), false, Level.ExplosionInteraction.TRIGGER, ParticleTypes.GUST_EMITTER_SMALL, ParticleTypes.GUST_EMITTER_LARGE, SoundEvents.WIND_CHARGE_BURST), LootItemEntityPropertyCondition.hasProperties(LootContext.EntityTarget.DIRECT_ATTACKER, net.minecraft.advancements.critereon.EntityPredicate.Builder.entity().flags(net.minecraft.advancements.critereon.EntityFlagsPredicate.Builder.flags().setIsFlying(false)).moving(MovementPredicate.fallDistance(MinMaxBounds.Doubles.atLeast((double)1.5F))))));
        preserved_inferno$register(context, VANISHING_CURSE, Enchantment.enchantment(Enchantment.definition(holdergetter2.getOrThrow(ItemTags.VANISHING_ENCHANTABLE), 1, 1, Enchantment.constantCost(25), Enchantment.constantCost(50), 8, new EquipmentSlotGroup[]{EquipmentSlotGroup.ANY})).withEffect(EnchantmentEffectComponents.PREVENT_EQUIPMENT_DROP));
        ci.cancel();
    }

    @Unique
    private static void preserved_inferno$register(BootstrapContext<Enchantment> context, ResourceKey<Enchantment> key, Enchantment.Builder builder) {
        context.register(key, builder.build(key.location()));
    }

    @Unique
    private static ResourceKey<Enchantment> preserved_inferno$key(String name) {
        return ResourceKey.create(Registries.ENCHANTMENT, ResourceLocation.withDefaultNamespace(name));
    }
}
